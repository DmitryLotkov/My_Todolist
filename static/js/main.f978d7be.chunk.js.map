{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","inputData","setInputData","error","setError","addItem","trim","placeholder","autoFocus","className","onKeyPress","e","key","value","onChange","currentTarget","onClick","EditableSpan","editMode","setEditMode","title","setTitle","offEditMode","setNewTitle","onBlur","onDoubleClick","TodoList","todolist","tasks","map","task","id","type","changeStatus","checked","todoListID","isDone","changeTaskTitle","removeTask","changeTodoListTitle","removeTodoLists","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","taskID","t","addTask","filteredTodoLists","tasksForTodoLists","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f978d7be.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype AddItemFormType = {\r\n\r\n    addItem: (title: string) => void\r\n}\r\nexport function AddItemForm(props: AddItemFormType){\r\n\r\n    let [inputData, setInputData] = useState(\"\");\r\n    let [error, setError] = useState()\r\n\r\n    const addItem = () => {\r\n        debugger\r\n        if (inputData.trim() !== \"\") {\r\n            props.addItem(inputData);\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n        setInputData(\"\");\r\n    }\r\n    const onchangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value) {\r\n            setError(null)\r\n        }\r\n        setInputData(e.currentTarget.value);\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input placeholder={\"Enter a title...\"}\r\n                   autoFocus={true}\r\n                   className={error && \"red\"}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   value={inputData}\r\n                   onChange={onchangeHandler}\r\n            />\r\n            <button onClick={addItem}>+</button>\r\n            {error && <div className={\"error\"}>{error}</div>}\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditablePropsType = {\r\n    title: string\r\n    setNewTitle: (title: string) => void\r\n}\r\nexport function EditableSpan (props:EditablePropsType){\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [title, setTitle] = useState<string>(props.title)\r\n    const OnEditMode = () => {\r\n        debugger\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        debugger\r\n        setEditMode(false);\r\n        props.setNewTitle(title)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) =>{\r\n        if(e.key === \"Enter\"){\r\n            offEditMode();\r\n        }\r\n    }\r\n    return (\r\n        editMode ?\r\n            <input value={title}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   autoFocus={true}\r\n                   onBlur={offEditMode}\r\n            onChange={onChangeHandler}/>:\r\n            <span onDoubleClick={OnEditMode}>{title}</span>\r\n\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValueType, StateType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\nexport type todoListPropsType = {\r\n    title: string\r\n    tasks: StateType\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    addItem: (inputData: string, todoListID: string) => void\r\n    changeStatus: (isDone: boolean, taskID: string, todoListID: string) => void\r\n    changeFilter: (filter: FilterValueType, todoListID: string) => void\r\n    filter: FilterValueType\r\n    todoListID: string\r\n    removeTodoLists: (todoListID: string) => void\r\n    changeTaskTitle: (title: string, taskID: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\n\r\nexport function TodoList(props: todoListPropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        debugger\r\n        props.addItem(title, props.todoListID)\r\n    }\r\n    const changeFilterAll = () => {\r\n        props.changeFilter(\"all\", props.todoListID);\r\n    }\r\n    const changeFilterCompleted = () => {\r\n        props.changeFilter(\"completed\", props.todoListID);\r\n    }\r\n    const changeFilterActive = () => {\r\n\r\n        props.changeFilter(\"active\", props.todoListID);\r\n    }\r\n    const deleteTodoList = () => props.removeTodoLists(props.todoListID)\r\n\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodoListTitle(title, props.todoListID)\r\n    }\r\n    const todolist = props.tasks.map(task => {\r\n\r\n        const changeTaskTitle = (title: string) => {\r\n            props.changeTaskTitle(title, task.id, props.todoListID );\r\n        }\r\n        let removeTask = () => {\r\n            props.removeTask(task.id, props.todoListID);\r\n        }\r\n        let changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeStatus(e.currentTarget.checked, task.id, props.todoListID)\r\n        }\r\n\r\n        return (\r\n            <ul key={task.id}>\r\n                <li>\r\n                    <input type=\"checkbox\"\r\n                           onChange={changeStatus}\r\n                           checked={task.isDone}\r\n                           className={task.isDone ? \"completedTask\" : \"\"}/>\r\n                    <EditableSpan title={task.title} setNewTitle={changeTaskTitle}/>\r\n                    <button onClick={removeTask}>x</button>\r\n\r\n                </li>\r\n            </ul>)\r\n    })\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    <h3><EditableSpan title={props.title} setNewTitle={changeTodolistTitle}/>\r\n                        <button onClick={deleteTodoList}>x</button>\r\n                    </h3>\r\n                </div>\r\n                <AddItemForm addItem={addTask}/>\r\n                {todolist}\r\n                <div>\r\n                    <button className={props.filter === \"all\" ? \"activeFilter\" : \"\"} onClick={changeFilterAll}>All\r\n                    </button>\r\n                    <button className={props.filter === \"active\" ? \"activeFilter\" : \"\"}\r\n                            onClick={changeFilterActive}>Active\r\n                    </button>\r\n                    <button className={props.filter === \"completed\" ? \"activeFilter\" : \"\"}\r\n                            onClick={changeFilterCompleted}>Completed\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport {TodoList} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\r\nexport type StateType = Array<taskType>\r\n\r\nexport type TodoListType = {\r\n    id: string, title: string, filter: FilterValueType\r\n}\r\nexport type TodoListStateType = {\r\n    [key: string]: Array<taskType>\r\n}\r\n\r\ntype taskType = {\r\n    id: string, title: string, isDone: boolean\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todoListID1 = v1();\r\n    let todoListID2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListID2, title: \"What to buy\", filter: \"all\"},\r\n    ])\r\n    let [tasks, setTasks] = useState<TodoListStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n            {id: v1(), title: \"TypeScript\", isDone: true},\r\n        ],\r\n        [todoListID2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Bread\", isDone: false},\r\n            {id: v1(), title: \"Cucumbers\", isDone: false},\r\n        ]\r\n    });\r\n\r\n\r\n    const changeStatus = (isDone: boolean, taskID: string, todoListID: string) => {\r\n\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, isDone: isDone} : t)\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    const addTask = (inputData: string, todoListID: string) => {\r\n        debugger\r\n        let task = {\r\n            id: v1(), title: inputData, isDone: false\r\n        }\r\n        setTasks({...tasks, [todoListID]: [task, ...tasks[todoListID]]})\r\n    };\r\n\r\n    const removeTask = (taskID: string, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    };\r\n    const changeFilter = (filter: FilterValueType, todoListID: string) => {\r\n        let copyTodoLists = [...todoLists];\r\n        let filteredTodoLists = copyTodoLists.map(t => t.id === todoListID ? {...t, filter: filter} : t);\r\n        setTodoLists(filteredTodoLists);\r\n    }\r\n    const removeTodoLists = (todoListID: string) => {\r\n        let copyTodoLists = [...todoLists];\r\n        let filteredTodoLists = copyTodoLists.filter(t => t.id !== todoListID);\r\n        setTodoLists(filteredTodoLists);\r\n    }\r\n\r\n    const addTodolist = (title: string, ) => {\r\n        const todoListID = v1();\r\n        let newTodoList: TodoListType =\r\n            {id: todoListID, title: title, filter: \"all\" };\r\n        setTodoLists([newTodoList, ...todoLists]);\r\n        setTasks({...tasks, [todoListID]:[]})\r\n    }\r\n    const changeTaskTitle = (title: string, taskID: string, todoListID: string, ) => {\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, title: title}: t)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTodoListTitle = (title:string, todoListID:string) => {\r\n        setTodoLists(todoLists.map(t => t.id === todoListID ? {...t, title:title}:t))\r\n    }\r\n    return (\r\n        <div className={\"App\"}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n            {\r\n                todoLists.map(t => {\r\n                    let tasksForTodoLists = tasks[t.id]\r\n                    if (t.filter === \"completed\") {\r\n                        tasksForTodoLists = tasksForTodoLists.filter(t => t.isDone)\r\n                    }\r\n                    if (t.filter === \"active\") {\r\n                        tasksForTodoLists = tasksForTodoLists.filter(t => !t.isDone)\r\n                    }\r\n\r\n                    return (\r\n                        <TodoList\r\n                            key={t.id}\r\n                            title={t.title}\r\n                            tasks={tasksForTodoLists}\r\n                            removeTask={removeTask}\r\n                            addItem={addTask}\r\n                            changeStatus={changeStatus}\r\n                            changeFilter={changeFilter}\r\n                            filter={t.filter}\r\n                            todoListID={t.id}\r\n                            removeTodoLists={removeTodoLists}\r\n                            changeTaskTitle ={changeTaskTitle}\r\n                            changeTodoListTitle={changeTodoListTitle}\r\n                        />\r\n                    )\r\n                })}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}