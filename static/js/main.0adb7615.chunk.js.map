{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Reducers/task-reducer.ts","Task.tsx","TodoList.tsx","Reducers/todolistsReducer.ts","AppWithRedux.tsx","Reducers/state.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","addItem","console","log","useState","inputData","setInputData","error","setError","addLetter","trim","TextField","label","autoFocus","onKeyPress","e","key","value","onChange","currentTarget","variant","helperText","IconButton","onClick","color","EditableSpan","props","editMode","setEditMode","title","setTitle","offEditMode","setNewTitle","className","onBlur","onDoubleClick","removeTaskAC","taskID","todolistID","type","todoListID","changeTaskStatusAC","isDone","changeTaskTitleAC","initialState","Task","toDoListID","dispatch","useDispatch","task","useSelector","state","tasks","filter","id","onChangeHandler","useCallback","newTaskStatus","checked","changeTitleHandler","newValue","onClickHandler","Checkbox","Close","fontSize","TodoList","changeFilter","removeTodoLists","changeTodoListTitle","addTask","changeFilterAll","changeFilterCompleted","changeFilterActive","deleteTodoList","changeTodolistTitle","tasksForTodoLists","t","todolist","map","Delete","Button","size","AppWithRedux","todoLists","toDoLists","changeStatus","action","changeTaskTitle","removeTask","addTodolist","v1","addTodoListAC","changeTodoListFilterAC","changeTodoListTitleAC","TodoListsJSX","Grid","item","Paper","elevation","style","padding","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","paddingRight","paddingTop","paddingBottom","spacing","rootReducer","combineReducers","newTask","tl","newTodoList","newTitle","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0adb7615.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, useState} from \"react\";\nimport {IconButton} from \"@material-ui/core\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport TextField from \"@material-ui/core/TextField\";\n\ntype AddItemFormType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo(({addItem}: AddItemFormType)=> {\n    console.log(\"AddItemForm\");\n\n    let [inputData, setInputData] = useState(\"\");\n    let [error, setError] = useState<string | null>(null);\n\n    const addLetter = () => {\n        if (inputData.trim() !== \"\") {\n            addItem(inputData);\n        } else {\n            setError(\"Title is required!\")\n        }\n        setInputData(\"\");\n    }\n\n    const onchangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n\n\n        setInputData(e.currentTarget.value);\n    }\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLElement>) => {\n\n        if(error){\n            setError(null)\n        }\n\n        if (e.key === \"Enter\") {\n            addLetter();\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                label={\"Enter a title...\"}\n                autoFocus={true}\n                error={!!error}\n                onKeyPress={onKeyPressHandler}\n                value={inputData}\n                onChange={onchangeHandler}\n                variant={\"outlined\"}\n                helperText={error && 'Title is required!'}\n            />\n            <IconButton onClick={addLetter}>\n                <AddCircleIcon color={\"primary\"}/>\n            </IconButton>\n        </div>\n    );\n})","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EditablePropsType = {\n    title: string\n    setNewTitle: (title: string) => void\n}\nexport function EditableSpan (props:EditablePropsType){\n\n    let [editMode, setEditMode] = useState<boolean>(false);\n    let [title, setTitle] = useState<string>(props.title)\n    const OnEditMode = () => {\n        setEditMode(true)\n    }\n    const offEditMode = () => {\n        setEditMode(false);\n        props.setNewTitle(title)\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) =>{\n        if(e.key === \"Enter\"){\n            offEditMode();\n        }\n    }\n    return (\n        editMode ?\n            <TextField className={\"editableSpan\"} value={title}\n                       onKeyPress={onKeyPressHandler}\n                       autoFocus={true}\n                       onBlur={offEditMode}\n                       onChange={onChangeHandler}/> :\n            <span onDoubleClick={OnEditMode}>{title}</span>\n\n    )\n}","import {TasksStateType, taskType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport { AddToDoListReducerActionType, RemoveToDoListActionType} from \"./todolistsReducer\";\r\n\r\n\r\nexport type ActionsType = RemoveTaskActionType | AddTaskActionType | ChangeTaskStatusType |\r\n    ChangeTaskTitleType | AddToDoListReducerActionType | RemoveToDoListActionType;\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todoListID: string\r\n    taskID: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type ChangeTaskStatusType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    isDone: boolean\r\n    todoListID: string\r\n    taskID: string\r\n}\r\nexport type ChangeTaskTitleType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskID: string,\r\n    title: string,\r\n    todoListID: string\r\n}\r\nexport const removeTaskAC = (taskID: string, todolistID: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', todoListID: todolistID, taskID: taskID}\r\n}\r\nexport const addTaskAC = (title: string, todolistID: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title: title, todoListID:todolistID}\r\n}\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todoListID: string): ChangeTaskStatusType => {\r\n    return {type: 'CHANGE-TASK-STATUS', isDone: isDone, todoListID: todoListID, taskID:taskID}\r\n}\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todoListID: string): ChangeTaskTitleType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title: title, taskID:taskID, todoListID:todoListID}\r\n}\r\n\r\n\r\nlet initialState: TasksStateType = {};\r\n\r\nexport const taskReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":{\r\n            return {\r\n                ...state, [action.todoListID]:state[action.todoListID].filter(t => t.id !==action.taskID)\r\n            }\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const newTask:taskType = {\r\n                id: v1(), title: action.title, isDone: false\r\n            }\r\n            return {\r\n                ...state, [action.todoListID]:[newTask, ...state[action.todoListID]]\r\n            }\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            return {\r\n                ...state, [action.todoListID]:state[action.todoListID].map(task => task.id === action.taskID ? {...task,isDone:action.isDone}:task)\r\n            }\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            return {\r\n                ...state, [action.todoListID]:state[action.todoListID].map(task => task.id === action.taskID ? {...task, title: action.title}: task)\r\n            }\r\n        }\r\n        case \"ADD-TODOLIST\":{\r\n\r\n            state[action.todoListID] = []\r\n            return {\r\n                ...state\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\":\r\n            delete state[action.todoListID]\r\n            return {\r\n                ...state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import React, {ChangeEvent, useCallback} from \"react\";\r\n\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Close} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./Reducers/state\";\r\nimport {taskType} from \"./AppWithRedux\";\r\nimport {changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./Reducers/task-reducer\";\r\n\r\nexport type TaskPropsType = {\r\n    toDoListID: string\r\n    taskID: string\r\n}\r\n\r\nexport const Task = React.memo(({toDoListID, taskID}:TaskPropsType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const task = useSelector<AppRootStateType, taskType>(state => state.tasks[toDoListID]\r\n        .filter(task => task.id === taskID)[0]);\r\n\r\n    const onChangeHandler = useCallback((e:ChangeEvent<HTMLInputElement>) => {\r\n        const newTaskStatus = e.currentTarget.checked;\r\n        dispatch(changeTaskStatusAC(taskID, newTaskStatus, toDoListID))\r\n    },[dispatch, taskID, toDoListID])\r\n    const changeTitleHandler = useCallback((newValue: string) =>{\r\n        dispatch(changeTaskTitleAC(taskID, newValue, toDoListID ))\r\n    },[dispatch, taskID, toDoListID]);\r\n\r\n    const onClickHandler = useCallback(() =>{\r\n        dispatch(removeTaskAC(taskID, toDoListID))\r\n    },[taskID, toDoListID, dispatch])\r\n    return (\r\n\r\n        <div className={\"todolist\"}>\r\n            <div className={\"deleteLi\"}>\r\n                <Checkbox color={\"primary\"}\r\n                          onChange={onChangeHandler}\r\n                          checked={task.isDone}\r\n                          className={task.isDone ? \"completedTask\" : \"\"}/>\r\n                <EditableSpan title={task.title} setNewTitle={changeTitleHandler}/>\r\n                <IconButton onClick={onClickHandler}>\r\n                    <Close fontSize={\"small\"} color={\"primary\"}/>\r\n                </IconButton>\r\n            </div>\r\n        </div>)\r\n})","import React, {useCallback} from \"react\";\nimport {FilterValueType, StateType} from \"./App\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\n\nimport {Task} from \"./Task\";\n\nexport type todoListPropsType = {\n    title: string\n    tasks: StateType\n    removeTask: (taskID: string, todoListID: string) => void\n    addItem: (inputData: string, todoListID: string) => void\n    changeStatus: (taskID: string, isDone: boolean, todoListID: string) => void\n    changeFilter: (filter: FilterValueType, todoListID: string) => void\n    filter: FilterValueType\n    todoListID: string\n    removeTodoLists: (todoListID: string) => void\n    changeTaskTitle: (title: string, taskID: string, todoListID: string) => void\n    changeTodoListTitle: (title: string, todoListID: string) => void\n}\n\n\nexport const TodoList = React.memo(({\n                                        todoListID,\n                                        addItem,\n                                        changeFilter,\n                                        removeTodoLists,\n                                        changeTodoListTitle,\n                                        tasks,\n                                        filter,\n                                        title} :todoListPropsType) => {\n\n    const addTask = useCallback((title: string) => {\n        addItem(title, todoListID)\n    }, [addItem, todoListID]);\n\n    const changeFilterAll = useCallback(() => {\n        changeFilter(\"all\", todoListID);\n    },[todoListID, changeFilter]);\n\n    const changeFilterCompleted = useCallback(() => {\n        changeFilter(\"completed\", todoListID);\n    },[changeFilter, todoListID]);\n\n    const changeFilterActive = useCallback(() => {\n        changeFilter(\"active\", todoListID);\n    },[changeFilter, todoListID]);\n\n    const deleteTodoList = useCallback(() =>\n        removeTodoLists(todoListID),[todoListID, removeTodoLists])\n\n    const changeTodolistTitle = useCallback((title: string) => {\n        changeTodoListTitle(title, todoListID)\n    },[changeTodoListTitle, todoListID]);\n\n\n    let tasksForTodoLists = tasks;\n\n    if (filter === \"completed\") {\n        tasksForTodoLists = tasksForTodoLists.filter(t => t.isDone)\n    }\n    if (filter === \"active\") {\n        tasksForTodoLists = tasksForTodoLists.filter(t => !t.isDone)\n    }\n\n    const todolist = tasksForTodoLists.map(task => {\n\n\n        return <Task key={task.id}\n                     taskID={task.id}\n                     toDoListID={todoListID}\n                    />\n    })\n    return (\n        <div>\n            <div>\n                <div>\n                    <h3 className={\"title\"}>\n\n                        <div className={\"whatToLearn\"}>\n                            <EditableSpan title={title} setNewTitle={changeTodolistTitle}/>\n                        </div>\n                        <IconButton onClick={deleteTodoList}>\n                            <Delete color={\"primary\"}/>\n                        </IconButton>\n                    </h3>\n                </div>\n                <AddItemForm addItem={addTask}/>\n                {todolist}\n                <div className={\"buttons\"}>\n                    <Button size={\"small\"} variant={\"contained\"} className={\"button\"}\n                            color={filter === \"all\" ? \"secondary\" : \"primary\"} onClick={changeFilterAll}>All\n                    </Button>\n                    <Button size={\"small\"} variant={\"contained\"} className={\"button\"}\n                            color={filter === \"active\" ? \"secondary\" : \"primary\"}\n                            onClick={changeFilterActive}>Active\n                    </Button>\n                    <Button size={\"small\"} variant={\"contained\"} className={\"button\"}\n                            color={filter === \"completed\" ? \"secondary\" : \"primary\"}\n                            onClick={changeFilterCompleted}>Completed\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n})","import {FilterValueType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type ActionsType = RemoveToDoListActionType | AddToDoListReducerActionType|\r\n    ChangeTodoListFilterActionType | ChangeTodoListTitleActionType\r\n\r\n\r\nexport type RemoveToDoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todoListID: string\r\n}\r\nexport type AddToDoListReducerActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type ChangeTodoListFilterActionType = {\r\n    type:\"CHANGE-TODOLIST-FILTER\",\r\n    todoListID: string,\r\n    filter: FilterValueType\r\n}\r\nexport type ChangeTodoListTitleActionType = {\r\n    type:\"CHANGE-TODOLIST-TITLE\",\r\n    todoListID: string\r\n    title: string\r\n}\r\nexport const removeTodoListAC = (todolistID:string):RemoveToDoListActionType =>{\r\n    return {type:'REMOVE-TODOLIST', todoListID: todolistID}\r\n}\r\nexport const changeTodoListFilterAC = (todoListID:string, filter: FilterValueType ):ChangeTodoListFilterActionType =>{\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", filter: filter, todoListID:todoListID}\r\n}\r\nexport const addTodoListAC = (title: string):AddToDoListReducerActionType =>{\r\n    return {type: \"ADD-TODOLIST\", title:title, todoListID: v1()}\r\n}\r\nexport const changeTodoListTitleAC = (todoListID: string, title: string):ChangeTodoListTitleActionType =>{\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", title: title, todoListID:todoListID}\r\n}\r\nlet initialState:Array<TodoListType> = []\r\n\r\n\r\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: ActionsType): Array<TodoListType> =>{\r\n    switch (action.type){\r\n        case 'REMOVE-TODOLIST':{\r\n            return state.filter(tl => tl.id !== action.todoListID);\r\n        }\r\n        case 'ADD-TODOLIST':\r\n            let newTodoList: TodoListType =\r\n                {id: action.todoListID, title: action.title, filter: \"all\" };\r\n            return [\r\n                newTodoList, ...state\r\n            ]\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(t => t.id === action.todoListID ? {...t, filter: action.filter}: t)\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            let newTitle = \"What to deal\";\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, title: newTitle}:tl);\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, {useCallback} from 'react';\nimport './App.css';\nimport {TodoList} from \"./TodoList\";\nimport {Menu} from \"@material-ui/icons\";\nimport {AppBar, Button, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./Reducers/task-reducer\";\nimport {\n    addTodoListAC,\n    changeTodoListFilterAC,\n    changeTodoListTitleAC,\n    removeTodoListAC,\n} from \"./Reducers/todolistsReducer\";\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./Reducers/state\";\n\n\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\n\n\nexport type TodoListType = {\n    id: string, title: string, filter: FilterValueType\n}\nexport type TasksStateType = {\n    [key: string]: Array<taskType>\n}\n\nexport type taskType = {\n    id: string, title: string, isDone: boolean\n}\n\nexport function AppWithRedux() {\n    console.log(\"AppWithRedux\")\n    let dispatch = useDispatch();\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\n    let todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.toDoLists);\n\n    const changeStatus = useCallback((taskID: string, isDone: boolean, todoListID: string) => {\n        dispatch(changeTaskStatusAC(taskID, isDone, todoListID));\n    },[dispatch]);\n\n    const addTask = useCallback((inputData: string, todoListID: string) => {\n\n        let action = addTaskAC(inputData, todoListID);\n        dispatch(action);\n    },[dispatch]);\n\n    const changeTaskTitle = useCallback((title: string, taskID: string, todoListID: string,) => {\n        let action = changeTaskTitleAC(title, taskID, todoListID)\n        dispatch(action);\n    },[dispatch])\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\n        let action = removeTaskAC(taskID, todoListID);\n        dispatch(action);\n    },[dispatch]);\n\n    const addTodolist = useCallback((title: string) => {\n        let action = addTodoListAC(title);\n        dispatch(action);\n    },[dispatch]);\n\n    const changeFilter = useCallback((filter: FilterValueType,todoListID: string ) => {\n        let action = changeTodoListFilterAC(todoListID, filter);\n        dispatch(action);\n    },[dispatch]);\n\n    const removeTodoLists = useCallback((todoListID: string) => {\n        let action = removeTodoListAC(todoListID);\n        dispatch(action);\n    },[dispatch]);\n\n    const changeTodoListTitle = useCallback((title: string, todoListID: string) => {\n        let action = changeTodoListTitleAC(title, todoListID);\n        dispatch(action);\n    },[dispatch]);\n\nconst TodoListsJSX = todoLists.map(t => {\n\n    return (\n        <Grid item key={t.id}>\n            <Paper elevation={2} style={{padding: \"1rem\"}}>\n                <TodoList\n                    title={t.title}\n                    tasks={tasks[t.id]}\n                    removeTask={removeTask}\n                    addItem={addTask}\n                    changeStatus={changeStatus}\n                    changeFilter={changeFilter}\n                    filter={t.filter}\n                    todoListID={t.id}\n                    removeTodoLists={removeTodoLists}\n                    changeTaskTitle={changeTaskTitle}\n                    changeTodoListTitle={changeTodoListTitle}\n                />\n            </Paper>\n        </Grid>\n    )\n})\n    return (\n        <div className={\"App\"}>\n\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n\n            <Container fixed>\n                <Grid container style={{paddingRight: \"2rem\",paddingTop: \"2rem\",paddingBottom:\"2rem\" }}>\n                        <AddItemForm addItem={addTodolist}/>\n                </Grid>\n                <Grid container spacing={8}>\n                    {\n                        TodoListsJSX\n                    }\n                </Grid>\n\n            </Container>\n        </div>\n    );\n\n}\n\n\n\n","import {combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"./task-reducer\";\r\nimport {todoListsReducer} from \"./todolistsReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    toDoLists: todoListsReducer,\r\n})\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {AppWithRedux} from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Reducers/state\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}