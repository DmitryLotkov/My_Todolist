{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","error","setError","inputData","setInputData","addTask","trim","todolist","tasks","map","t","key","id","type","onChange","e","changeStatus","currentTarget","checked","isDone","className","title","onClick","removeTask","autoFocus","onKeyPress","charCode","value","filter","changeFilter","App","v1","setTasks","setFilter","taskId","console","log","task","taskID","filterValue","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8ad69cfb.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\nimport {FilterValueType, StateType} from \"./App\";\r\n\r\nexport type todoListPropsType = {\r\n    title: string\r\n    tasks: StateType\r\n    removeTask: (taskID: string) => void\r\n    addTask: (inputData: string) => void\r\n    changeStatus: (isDone: boolean, taskID: string) => void\r\n    changeFilter: (filter:FilterValueType) => void\r\n    filter: FilterValueType\r\n}\r\n\r\n\r\nexport function TodoList(props: todoListPropsType) {\r\n    let [error, setError] = useState()\r\n    let [inputData, setInputData] = useState(\"\");\r\n\r\n    const addTask = () => {\r\n        if(inputData.trim() != \"\"){\r\n            props.addTask(inputData);\r\n        }else{\r\n            setError(\"Title is required!\")\r\n        }\r\n        setInputData(\"\");\r\n    }\r\n    const onchangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(e.currentTarget.value){\r\n            setError(null)\r\n        }\r\n        setInputData(e.currentTarget.value);\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLElement>) =>{\r\n        if(e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    const changeFilterAll = () => {\r\n        props.changeFilter(\"all\");\r\n    }\r\n    const changeFilterCompleted = () =>{\r\n        props.changeFilter(\"completed\");\r\n    }\r\n    const changeFilterActive = () =>{\r\n        props.changeFilter(\"active\");\r\n    }\r\n    const todolist = props.tasks.map(t => {\r\n\r\n        let removeTask = () => {\r\n            props.removeTask(t.id);\r\n        }\r\n        let changeStatus = (e:ChangeEvent<HTMLInputElement>) => {\r\n            props.changeStatus(e.currentTarget.checked, t.id)\r\n        }\r\n\r\n        return (\r\n            <ul key={t.id}>\r\n                <li>\r\n                    <input type=\"checkbox\"\r\n                           onChange={changeStatus}\r\n                           checked={t.isDone}\r\n                           className={ t.isDone ? \"completedTask\":\"\"}/>\r\n                    <span>{t.title}</span>\r\n                    <button onClick={removeTask}>x</button>\r\n\r\n                </li>\r\n            </ul>)\r\n    })\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>{props.title}</h3>\r\n                <div>\r\n                    <input autoFocus={true}\r\n                           className={error && \"red\"}\r\n                           onKeyPress={onKeyPressHandler}\r\n                           value={inputData}\r\n                           onChange={onchangeHandler}\r\n                    />\r\n                    <button onClick={addTask}>+</button>\r\n                    {error&& <div className={\"error\"}>{error}</div>}\r\n                </div>\r\n                {todolist}\r\n                <div>\r\n                    <button className={props.filter === \"all\" ? \"activeFilter\": \"\"} onClick={changeFilterAll}>All</button>\r\n                    <button className={props.filter === \"active\" ? \"activeFilter\": \"\"} onClick={changeFilterActive}>Active</button>\r\n                    <button className={props.filter === \"completed\" ? \"activeFilter\": \"\"} onClick={changeFilterCompleted}>Completed</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport {TodoList} from \"./TodoList\";\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\r\nexport type StateType = Array<taskType>\r\n\r\ntype taskType = {\r\n    id: string, title: string, isDone: boolean\r\n}\r\n\r\nfunction App() {\r\n\r\n    const changeStatus = (isDone: boolean, taskID: string) => {\r\n\r\n        tasks = tasks.map(t => t.id === taskID ? {...t, isDone: isDone} : t)\r\n        /* let task = tasks.find(t => t.id === taskID);\r\n         if(task){\r\n             task.isDone = isDone;\r\n             setTasks([...tasks])\r\n         }*/\r\n        setTasks([...tasks])\r\n    }\r\n\r\n    const addTask = (inputData: string) => {\r\n        let task = {\r\n            id: v1(), title: inputData, isDone: false\r\n        }\r\n        setTasks([task, ...tasks])\r\n    };\r\n\r\n    const removeTask = (taskId: string) => {\r\n        tasks = tasks.filter(t => t.id !== taskId);\r\n        setTasks(tasks);\r\n        console.log(tasks);\r\n    };\r\n\r\n\r\n    let [tasks, setTasks] = useState<StateType>([\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"React\", isDone: false},\r\n        {id: v1(), title: \"Redux\", isDone: false},\r\n        {id: v1(), title: \"TypeScript\", isDone: true},\r\n    ]);\r\n\r\n    let [filter, setFilter] = useState<FilterValueType>(\"all\");\r\n\r\n    if (filter === \"completed\") {\r\n        tasks = tasks.filter(t => t.isDone);\r\n    }\r\n    if (filter === \"active\") {\r\n        tasks = tasks.filter(t => !t.isDone);\r\n    }\r\n    const changeFilter = (filterValue: FilterValueType) => {\r\n        setFilter(filterValue);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <TodoList title={\"What to learn\"}\r\n                      tasks={tasks}\r\n                      removeTask={removeTask}\r\n                      addTask={addTask}\r\n                      changeStatus={changeStatus}\r\n                      changeFilter={changeFilter}\r\n                      filter={filter}\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}