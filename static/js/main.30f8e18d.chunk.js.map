{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","error","setError","inputData","setInputData","addTask","trim","todoListID","todolist","tasks","map","t","key","id","type","onChange","e","console","log","currentTarget","checked","changeStatus","isDone","className","title","onClick","removeTask","removeTodoLists","autoFocus","onKeyPress","charCode","value","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","taskID","task","filteredTodoLists","tasksForTodoLists","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.30f8e18d.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\nimport {FilterValueType, StateType} from \"./App\";\r\n\r\nexport type todoListPropsType = {\r\n    title: string\r\n    tasks: StateType\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    addTask: (inputData: string, todoListID: string) => void\r\n    changeStatus: (isDone: boolean, taskID: string, todoListID: string) => void\r\n    changeFilter: (filter: FilterValueType, todoListID: string) => void\r\n    filter: FilterValueType\r\n    todoListID: string\r\n    removeTodoLists: (todoListID: string) => void\r\n}\r\n\r\n\r\nexport function TodoList(props: todoListPropsType) {\r\n    let [error, setError] = useState()\r\n    let [inputData, setInputData] = useState(\"\");\r\n\r\n    const addTask = () => {\r\n\r\n        if (inputData.trim() !== \"\") {\r\n            props.addTask(inputData, props.todoListID);\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n        setInputData(\"\");\r\n    }\r\n    const onchangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value) {\r\n            setError(null)\r\n        }\r\n        setInputData(e.currentTarget.value);\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLElement>) => {\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    const changeFilterAll = () => {\r\n        props.changeFilter(\"all\", props.todoListID);\r\n    }\r\n    const changeFilterCompleted = () => {\r\n        props.changeFilter(\"completed\", props.todoListID);\r\n    }\r\n    const changeFilterActive = () => {\r\n\r\n        props.changeFilter(\"active\", props.todoListID);\r\n    }\r\n    const deleteTodoList = () => props.removeTodoLists(props.todoListID)\r\n    const todolist = props.tasks.map(t => {\r\n\r\n\r\n        let removeTask = () => {\r\n            props.removeTask(t.id, props.todoListID);\r\n        }\r\n        let changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n            debugger\r\n            console.log(e.currentTarget.checked)\r\n            props.changeStatus(e.currentTarget.checked, t.id, props.todoListID)\r\n\r\n        }\r\n\r\n        return (\r\n            <ul key={t.id}>\r\n                <li>\r\n                    <input type=\"checkbox\"\r\n                           onChange={changeStatus}\r\n                           checked={t.isDone}\r\n                           className={t.isDone ? \"completedTask\" : \"\"}/>\r\n                    <span>{t.title}</span>\r\n                    <button onClick={removeTask}>x</button>\r\n\r\n                </li>\r\n            </ul>)\r\n    })\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    <h3>{props.title}\r\n                        <button onClick={deleteTodoList}>x</button>\r\n                    </h3>\r\n                </div>\r\n\r\n                <div>\r\n                    <input autoFocus={true}\r\n                           className={error && \"red\"}\r\n                           onKeyPress={onKeyPressHandler}\r\n                           value={inputData}\r\n                           onChange={onchangeHandler}\r\n                    />\r\n                    <button onClick={addTask}>+</button>\r\n                    {error && <div className={\"error\"}>{error}</div>}\r\n                </div>\r\n                {todolist}\r\n                <div>\r\n                    <button className={props.filter === \"all\" ? \"activeFilter\" : \"\"} onClick={changeFilterAll}>All\r\n                    </button>\r\n                    <button className={props.filter === \"active\" ? \"activeFilter\" : \"\"}\r\n                            onClick={changeFilterActive}>Active\r\n                    </button>\r\n                    <button className={props.filter === \"completed\" ? \"activeFilter\" : \"\"}\r\n                            onClick={changeFilterCompleted}>Completed\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport {TodoList} from \"./TodoList\";\r\n\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\r\nexport type StateType = Array<taskType>\r\n\r\nexport type TodoListType = {\r\n    id: string, title: string, filter: FilterValueType\r\n}\r\nexport type TodoListStateType = {\r\n    [key: string]: Array<taskType>\r\n}\r\n\r\ntype taskType = {\r\n    id: string, title: string, isDone: boolean\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todoListID1 = v1();\r\n    let todoListID2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListID2, title: \"What to buy\", filter: \"all\"},\r\n    ])\r\n    let [tasks, setTasks] = useState<TodoListStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n            {id: v1(), title: \"TypeScript\", isDone: true},\r\n        ],\r\n        [todoListID2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Bread\", isDone: false},\r\n            {id: v1(), title: \"Cucumbers\", isDone: false},\r\n        ]\r\n    });\r\n\r\n\r\n    const changeStatus = (isDone: boolean, taskID: string, todoListID: string) => {\r\n\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, isDone: isDone} : t)\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    const addTask = (inputData: string, todoListID: string) => {\r\n        let task = {\r\n            id: v1(), title: inputData, isDone: false\r\n        }\r\n        setTasks({...tasks, [todoListID]: [task, ...tasks[todoListID]]})\r\n    };\r\n\r\n    const removeTask = (taskID: string, todoListID: string) => {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    };\r\n    const changeFilter = (filter: FilterValueType, todoListID: string) => {\r\n        let copyTodoLists = [...todoLists];\r\n        let filteredTodoLists = copyTodoLists.map(t => t.id === todoListID ? {...t, filter: filter} : t);\r\n        setTodoLists(filteredTodoLists);\r\n    }\r\n    const removeTodoLists = (todoListID: string) => {\r\n        let copyTodoLists = [...todoLists];\r\n        let filteredTodoLists = copyTodoLists.filter(t => t.id !== todoListID);\r\n        setTodoLists(filteredTodoLists);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"App\"}>\r\n            {\r\n                todoLists.map(t => {\r\n                    let tasksForTodoLists = tasks[t.id]\r\n                    if (t.filter === \"completed\") {\r\n                        tasksForTodoLists = tasksForTodoLists.filter(t => t.isDone)\r\n                    }\r\n                    if (t.filter === \"active\") {\r\n                        tasksForTodoLists = tasksForTodoLists.filter(t => !t.isDone)\r\n                    }\r\n\r\n                    return (\r\n                        <TodoList\r\n                            key={t.id}\r\n                            title={t.title}\r\n                            tasks={tasksForTodoLists}\r\n                            removeTask={removeTask}\r\n                            addTask={addTask}\r\n                            changeStatus={changeStatus}\r\n                            changeFilter={changeFilter}\r\n                            filter={t.filter}\r\n                            todoListID={t.id}\r\n                            removeTodoLists={removeTodoLists}\r\n                        />\r\n                    )\r\n                })}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}