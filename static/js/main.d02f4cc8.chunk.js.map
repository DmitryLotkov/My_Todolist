{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","Reducers/task-reducer.ts","Reducers/todolistsReducer.ts","AppWithRedux.tsx","Reducers/state.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","inputData","setInputData","error","setError","addItem","trim","TextField","label","autoFocus","onKeyPress","e","key","value","onChange","currentTarget","variant","helperText","IconButton","onClick","color","EditableSpan","editMode","setEditMode","title","setTitle","offEditMode","setNewTitle","className","onBlur","onDoubleClick","TodoList","todolist","tasks","map","task","id","Checkbox","changeStatus","checked","todoListID","isDone","changeTaskTitle","removeTask","Close","fontSize","changeTodoListTitle","removeTodoLists","Delete","Button","size","filter","changeFilter","initialState","AppWithRedux","dispatch","useDispatch","useSelector","state","todoLists","toDoLists","taskID","action","type","changeTaskStatusAC","addTask","changeTaskTitleAC","todolistID","removeTaskAC","changeTodoListFilterAC","changeTodoListTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","paddingRight","paddingTop","paddingBottom","v1","addTodoListAC","spacing","t","tasksForTodoLists","item","Paper","elevation","padding","rootReducer","combineReducers","newTask","tl","newTodoList","td","newTitle","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d02f4cc8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, useState} from \"react\";\nimport {IconButton} from \"@material-ui/core\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\nimport TextField from \"@material-ui/core/TextField\";\n\ntype AddItemFormType = {\n\n    addItem: (title: string) => void\n}\n\nexport function AddItemForm(props: AddItemFormType) {\n\n    let [inputData, setInputData] = useState(\"\");\n    let [error, setError] = useState()\n\n    const addItem = () => {\n        debugger\n        if (inputData.trim() !== \"\") {\n            props.addItem(inputData);\n        } else {\n            setError(\"Title is required!\")\n        }\n        setInputData(\"\");\n    }\n    const onchangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget.value) {\n            setError(null)\n        }\n        setInputData(e.currentTarget.value);\n    }\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLElement>) => {\n        if (e.key === \"Enter\") {\n            addItem();\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                label={\"Enter a title...\"}\n                autoFocus={true}\n                error={error}\n                onKeyPress={onKeyPressHandler}\n                value={inputData}\n                onChange={onchangeHandler}\n                variant={\"outlined\"}\n                helperText={error && 'Title is required!'}\n            />\n            <IconButton onClick={addItem}>\n                <AddCircleIcon color={\"primary\"}/>\n            </IconButton>\n        </div>\n    );\n}","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EditablePropsType = {\n    title: string\n    setNewTitle: (title: string) => void\n}\nexport function EditableSpan (props:EditablePropsType){\n\n    let [editMode, setEditMode] = useState<boolean>(false);\n    let [title, setTitle] = useState<string>(props.title)\n    const OnEditMode = () => {\n        debugger\n        setEditMode(true)\n    }\n    const offEditMode = () => {\n        debugger\n        setEditMode(false);\n        props.setNewTitle(title)\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) =>{\n        if(e.key === \"Enter\"){\n            offEditMode();\n        }\n    }\n    return (\n        editMode ?\n            <TextField className={\"editableSpan\"} value={title}\n                       onKeyPress={onKeyPressHandler}\n                       autoFocus={true}\n                       onBlur={offEditMode}\n                       onChange={onChangeHandler}/> :\n            <span onDoubleClick={OnEditMode}>{title}</span>\n\n    )\n}","import React, {ChangeEvent} from \"react\";\nimport {FilterValueType, StateType} from \"./App\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Close, Delete} from \"@material-ui/icons\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nexport type todoListPropsType = {\n    title: string\n    tasks: StateType\n    removeTask: (taskID: string, todoListID: string) => void\n    addItem: (inputData: string, todoListID: string) => void\n    changeStatus: (taskID: string, isDone: boolean, todoListID: string) => void\n    changeFilter: (filter: FilterValueType, todoListID: string) => void\n    filter: FilterValueType\n    todoListID: string\n    removeTodoLists: (todoListID: string) => void\n    changeTaskTitle: (title: string, taskID: string, todoListID: string) => void\n    changeTodoListTitle: (title: string, todoListID: string) => void\n}\n\n\nexport function TodoList(props: todoListPropsType) {\n\n    const addTask = (title: string) => {\n        debugger\n        props.addItem(title, props.todoListID)\n    }\n    const changeFilterAll = () => {\n        props.changeFilter(\"all\", props.todoListID);\n    }\n    const changeFilterCompleted = () => {\n        props.changeFilter(\"completed\", props.todoListID);\n    }\n    const changeFilterActive = () => {\n\n        props.changeFilter(\"active\", props.todoListID);\n    }\n    const deleteTodoList = () => props.removeTodoLists(props.todoListID)\n\n    const changeTodolistTitle = (title: string) => {\n        props.changeTodoListTitle(title, props.todoListID)\n    }\n    const todolist = props.tasks.map(task => {\n\n        const changeTaskTitle = (title: string) => {\n            props.changeTaskTitle(title, task.id, props.todoListID );\n        }\n        let removeTask = () => {\n            props.removeTask(task.id, props.todoListID);\n        }\n        let changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n            props.changeStatus(task.id, e.currentTarget.checked, props.todoListID)\n        }\n\n        return (\n            <div className={\"todolist\"} key={task.id}>\n                <div className={\"deleteLi\"}>\n                    <Checkbox color={\"primary\"}\n                           onChange={changeStatus}\n                           checked={task.isDone}\n                           className={task.isDone ? \"completedTask\" : \"\"}/>\n                    <EditableSpan title={task.title} setNewTitle={changeTaskTitle}/>\n                    <IconButton onClick={removeTask}>\n                        <Close fontSize={\"small\"} color={\"primary\"} />\n                    </IconButton>\n\n\n                </div>\n            </div>)\n    })\n    return (\n        <div>\n            <div>\n                <div>\n                    <h3 className={\"title\"}>\n\n                        <div className={\"whatToLearn\"}>\n                            <EditableSpan title={props.title} setNewTitle={changeTodolistTitle}/>\n                        </div>\n                        <IconButton onClick={deleteTodoList}>\n                        <Delete  color={\"primary\"} />\n                    </IconButton>\n                    </h3>\n                </div>\n                <AddItemForm addItem={addTask}/>\n                {todolist}\n                <div className={\"buttons\"}>\n                    <Button size={\"small\"} variant={\"contained\"} className= {\"button\"} color={props.filter === \"all\" ? \"secondary\" : \"primary\"} onClick={changeFilterAll}>All\n                    </Button>\n                    <Button size={\"small\"} variant={\"contained\"} className= {\"button\"} color={props.filter === \"active\" ? \"secondary\" : \"primary\"}\n                            onClick={changeFilterActive}>Active\n                    </Button>\n                    <Button size={\"small\"} variant={\"contained\"}  className= {\"button\"} color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}\n                            onClick={changeFilterCompleted}>Completed\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n}","import {TasksStateType, taskType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport { AddToDoListReducerActionType, RemoveToDoListActionType} from \"./todolistsReducer\";\r\n\r\n\r\nexport type ActionsType = RemoveTaskActionType | AddTaskActionType | ChangeTaskStatusType |\r\n    ChangeTaskTitleType | AddToDoListReducerActionType | RemoveToDoListActionType;\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todoListID: string\r\n    taskID: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type ChangeTaskStatusType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    isDone: boolean\r\n    todoListID: string\r\n    taskID: string\r\n}\r\nexport type ChangeTaskTitleType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskID: string,\r\n    title: string,\r\n    todoListID: string\r\n}\r\nexport const removeTaskAC = (taskID: string, todolistID: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', todoListID: todolistID, taskID: taskID}\r\n}\r\nexport const addTaskAC = (title: string, todolistID: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title: title, todoListID:todolistID}\r\n}\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todoListID: string): ChangeTaskStatusType => {\r\n    return {type: 'CHANGE-TASK-STATUS', isDone: isDone, todoListID: todoListID, taskID:taskID}\r\n}\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todoListID: string): ChangeTaskTitleType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title: title, taskID:taskID, todoListID:todoListID}\r\n}\r\n\r\n\r\nlet initialState: TasksStateType = {};\r\n\r\nexport const taskReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":{\r\n            return {\r\n                ...state, [action.todoListID]:state[action.todoListID].filter(t => t.id !==action.taskID)\r\n            }\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const newTask:taskType = {\r\n                id: v1(), title: action.title, isDone: false\r\n            }\r\n            return {\r\n                ...state, [action.todoListID]:[newTask, ...state[action.todoListID]]\r\n            }\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            return {\r\n                ...state, [action.todoListID]:state[action.todoListID].map(task => task.id === action.taskID ? {...task,isDone:action.isDone}:task)\r\n            }\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            return {\r\n                ...state, [action.todoListID]:state[action.todoListID].map(task => task.id === action.taskID ? {...task, title: action.title}: task)\r\n            }\r\n        }\r\n        case \"ADD-TODOLIST\":{\r\n\r\n            state[action.todoListID] = []\r\n            return {\r\n                ...state\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\":\r\n            delete state[action.todoListID]\r\n            return {\r\n                ...state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {FilterValueType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type ActionsType = RemoveToDoListActionType | AddToDoListReducerActionType|\r\n    ChangeTodoListFilterActionType | ChangeTodoListTitleActionType\r\n\r\n\r\nexport type RemoveToDoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todoListID: string\r\n}\r\nexport type AddToDoListReducerActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type ChangeTodoListFilterActionType = {\r\n    type:\"CHANGE-TODOLIST-FILTER\",\r\n    todoListID: string,\r\n    filter: FilterValueType\r\n}\r\nexport type ChangeTodoListTitleActionType = {\r\n    type:\"CHANGE-TODOLIST-TITLE\",\r\n    todoListID: string\r\n    title: string\r\n}\r\nexport const removeTodoListAC = (todolistID:string):RemoveToDoListActionType =>{\r\n    return {type:'REMOVE-TODOLIST', todoListID: todolistID}\r\n}\r\nexport const changeTodoListFilterAC = (todoListID:string, filter: FilterValueType ):ChangeTodoListFilterActionType =>{\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", filter: filter, todoListID:todoListID}\r\n}\r\nexport const addTodoListAC = (title: string):AddToDoListReducerActionType =>{\r\n    return {type: \"ADD-TODOLIST\", title:title, todoListID: v1()}\r\n}\r\nexport const changeTodoListTitleAC = (todoListID: string, title: string):ChangeTodoListTitleActionType =>{\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", title: title, todoListID:todoListID}\r\n}\r\nlet initialState:Array<TodoListType> = []\r\n\r\n\r\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: ActionsType): Array<TodoListType> =>{\r\n    switch (action.type){\r\n        case 'REMOVE-TODOLIST':{\r\n            return state.filter(tl => tl.id !== action.todoListID);\r\n        }\r\n        case 'ADD-TODOLIST':\r\n            let newTodoList: TodoListType =\r\n                {id: action.todoListID, title: action.title, filter: \"all\" };\r\n            return [\r\n                newTodoList, ...state\r\n            ]\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n\r\n            return state.map(td => td.id === action.todoListID ? {...td, filter: action.filter}: td);\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            let newTitle = \"What to deal\";\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, title: newTitle}:tl);\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport './App.css';\n\nimport {TodoList} from \"./TodoList\";\nimport {Menu} from \"@material-ui/icons\";\nimport {AppBar, Button, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./Reducers/task-reducer\";\nimport {\n    addTodoListAC,\n    changeTodoListFilterAC,\n    changeTodoListTitleAC,\n    removeTodoListAC,\n} from \"./Reducers/todolistsReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./Reducers/state\";\n\n\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\n\n\nexport type TodoListType = {\n    id: string, title: string, filter: FilterValueType\n}\nexport type TasksStateType = {\n    [key: string]: Array<taskType>\n}\n\nexport type taskType = {\n    id: string, title: string, isDone: boolean\n}\n\nexport function AppWithRedux() {\n\n    let dispatch = useDispatch();\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\n    let todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.toDoLists);\n\n    const changeStatus = (taskID: string, isDone: boolean, todoListID: string) => {\n    let action = changeTaskStatusAC(taskID, isDone, todoListID);\n        dispatch(action);\n    };\n\n    const addTask = (inputData: string, todoListID: string) => {\n        let action = addTaskAC(inputData, todoListID);\n        dispatch(action);\n    };\n\n    const changeTaskTitle = (title: string, taskID: string, todoListID: string,) => {\n        let action = changeTaskTitleAC(title, taskID, todoListID)\n        dispatch(action);\n    }\n    const removeTask = (taskID: string, todoListID: string) => {\n        let action = removeTaskAC(taskID, todoListID);\n        dispatch(action);\n    };\n\n    const addTodolist = (title: string) => {\n        let action = addTodoListAC(title);\n        dispatch(action);\n    }\n\n    const changeFilter = (filter: FilterValueType,todoListID: string ) => {\n        let action = changeTodoListFilterAC(todoListID, filter);\n        dispatch(action);\n    }\n\n    const removeTodoLists = (todoListID: string) => {\n        let action = removeTodoListAC(todoListID);\n        dispatch(action);\n    }\n\n    const changeTodoListTitle = (title: string, todoListID: string) => {\n        let action = changeTodoListTitleAC(title, todoListID);\n        dispatch(action);\n    }\n\n    return (\n        <div className={\"App\"}>\n\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n\n            <Container fixed>\n                <Grid container style={{paddingRight: \"2rem\",paddingTop: \"2rem\",paddingBottom:\"2rem\" }}>\n                        <AddItemForm addItem={addTodolist}/>\n                </Grid>\n                <Grid container spacing={8}>\n                    {\n                        todoLists.map(t => {\n                            let tasksForTodoLists = tasks[t.id]\n                            if (t.filter === \"completed\") {\n                                tasksForTodoLists = tasksForTodoLists.filter(t => t.isDone)\n                            }\n                            if (t.filter === \"active\") {\n                                tasksForTodoLists = tasksForTodoLists.filter(t => !t.isDone)\n                            }\n\n                            return (\n                                <Grid item key={t.id}>\n                                    <Paper elevation={2} style={{padding: \"1rem\"}}>\n                                        <TodoList\n                                            title={t.title}\n                                            tasks={tasksForTodoLists}\n                                            removeTask={removeTask}\n                                            addItem={addTask}\n                                            changeStatus={changeStatus}\n                                            changeFilter={changeFilter}\n                                            filter={t.filter}\n                                            todoListID={t.id}\n                                            removeTodoLists={removeTodoLists}\n                                            changeTaskTitle={changeTaskTitle}\n                                            changeTodoListTitle={changeTodoListTitle}\n                                        />\n                                    </Paper>\n                                </Grid>\n                            )\n                        })}\n                </Grid>\n\n            </Container>\n        </div>\n    );\n\n}\n\n\n\n","import {combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"./task-reducer\";\r\nimport {todoListsReducer} from \"./todolistsReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    toDoLists: todoListsReducer,\r\n})\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {AppWithRedux} from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Reducers/state\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}